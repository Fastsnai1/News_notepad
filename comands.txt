Команды в Django
    1. django-admin — обращение к джанго
    2. django-admin startproject name  — создаём проект с названием name 
    3. python manage.py runserver — запускает сервер
    4. python manage.py startapp name -создёт модуль(фича или например чат) с именем name
    5. MVC = MTV
        model = model
        view - template
        controller - view
    6. в urls.py - храняться ссылки на страницы
    7. если мы хотим импортировать что то из нашей фичи удобно сделать mysite корневой папкой, щёлкни правой
        кнопкой мыши по папке Mark directory as/sources root
    8. from django.urls import include - в эту функцию передаёться список вложенных маршрутов, используеться
        в urls.py
    9. в models.py - создаються классы описывающие поля в базе данных они дожны быть подклассами от models
    10. id - int
        title - Varchar
        content - Text
        created_at - DateTime
        update_at - DateTime
        photo - Image
        is_published - Boolean
    11.  в типах полей в Джанго указываем какого вида значение будет в столбце
        читай докум.

    12. Команда render(request запрос, путь к HTML шаблону, словарь со значениями переменных для шаблона)

Подключение статических файлов
    1. надо определить 3 константы
        STATIC_URL - префикс URL для статических файлов
        STATIC_ROOT - путь к общей статической папке, используемой реальным веб сервером.
        STATICFILES_DIRS - список дополнительных(нестандартных) путей к статическим файлам, используемых для
                            сбора и режима отладки.
        их надо прописать в settings.py

Взаимосвязь моделей базы данных Один ко многим.
    ForeignKey(<Ссылка на первичную модель(один)>, on_delete=<ограничения при удалении>)
    список ограничений:
    CASCADE - при удалении записи из первичной таблицы удаляються все запяси связанные с ней во вторичной
    PROTECT - запрещает удалять записи из первичной если она используеться во вторичной
    SET_NULL - при удалении из первичной, в поле у вторичных заначени ForeignKey ставиться NULL
    SET_DEFAULT - тоже что и SET_NULL только вместо нул можно определить дефолтное значение
    SET() - тоже самое только устанавливаеться пользовательское значение
    DO_NOTHING - удаление записи в первичной модели не вызывает не какий действий во вторичной.

python manage.py shell - если ввести в терминал будем обращаться не посредственно к джанго
Category.objects.create(name='Мероприятия') - создаёт запись в б.д.



